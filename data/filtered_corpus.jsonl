{"prompt": "Show price per sqft distribution by number of bedrooms", "response": "df['PRICE_PER_SQFT'] = df['PRICE']/df['AREA']; df.boxplot(column='PRICE_PER_SQFT', by='BEDROOM_NUM')"}
{"prompt": "Plot cumulative distribution of property prices", "response": "df['PRICE'].hist(cumulative=True, density=1, bins=50)"}
{"prompt": "Compare area distribution between 2BHK and 3BHK flats", "response": "df[df['BEDROOM_NUM'].isin([2,3])].boxplot(column='AREA', by='BEDROOM_NUM')"}
{"prompt": "Show price distribution for properties with 1 balcony vs 2+ balconies", "response": "df['BALCONY_GROUP'] = np.where(df['BALCONY_NUM']>1, '2+', '1'); df.boxplot(column='PRICE', by='BALCONY_GROUP')"}
{"prompt": "Plot average price trend over years for properties in South Mumbai", "response": "df[df['CITY']=='south mumbai'].groupby('YEAR_BUILT')['PRICE'].mean().plot(kind='line')"}
{"prompt": "Show percentage of furnished properties in each luxury category", "response": "pd.crosstab(df['LUXURY_CATEGORY'], df['FURNISH'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between residential and commercial properties", "response": "df.boxplot(column='PRICE', by='PROPERTY_TYPE')"}
{"prompt": "Plot average balcony count by luxury category", "response": "df.groupby('LUXURY_CATEGORY')['BALCONY_NUM'].mean().plot(kind='bar')"}
{"prompt": "Show geographical distribution of properties priced above 2 crore", "response": "px.scatter_mapbox(df[df['PRICE']>2e7], lat='LATITUDE', lon='LONGITUDE', color='CITY', size='PRICE', mapbox_style='carto-positron')"}
{"prompt": "Compare price per sqft between different facing directions", "response": "df['PRICE_PER_SQFT'] = df['PRICE']/df['AREA']; df.boxplot(column='PRICE_PER_SQFT', by='FACING')"}
{"prompt": "Show top 5 most expensive properties on map", "response": "px.scatter_mapbox(df.nlargest(5, 'PRICE'), lat='LATITUDE', lon='LONGITUDE', color='PRICE', hover_name='PROP_NAME', size='PRICE', mapbox_style='carto-positron')"}
{"prompt": "Plot average price by month of listing", "response": "df['MONTH'] = pd.to_datetime(df['LISTING_DATE']).dt.month; df.groupby('MONTH')['PRICE'].mean().plot(kind='line')"}
{"prompt": "Show distribution of property types in luxury category 1", "response": "df[df['LUXURY_CATEGORY']==1]['PROPERTY_TYPE'].value_counts().plot(kind='pie')"}
{"prompt": "Compare price distribution between high, mid, and low rise buildings", "response": "df.boxplot(column='PRICE', by='FLOOR_NUM')"}
{"prompt": "Plot number of properties listed by week", "response": "df['WEEK'] = pd.to_datetime(df['LISTING_DATE']).dt.week; df['WEEK'].value_counts().sort_index().plot(kind='line')"}
{"prompt": "Show average days on market by price range", "response": "df['PRICE_RANGE'] = pd.cut(df['PRICE'], bins=5); df.groupby('PRICE_RANGE')['DAYS_ON_MARKET'].mean().plot(kind='bar')"}
{"prompt": "Compare bedroom distribution between furnished and unfurnished", "response": "pd.crosstab(df['FURNISH'], df['BEDROOM_NUM']).plot(kind='bar', stacked=True)"}
{"prompt": "Show price distribution for properties with descriptions longer than 100 chars", "response": "df[df['DESCRIPTION'].str.len()>100]['PRICE'].plot(kind='hist')"}
{"prompt": "Plot average price by distance from city center (assuming coordinates)", "response": "city_center = (19.0760, 72.8777); df['DISTANCE'] = np.sqrt((df['LATITUDE']-city_center[0])**2 + (df['LONGITUDE']-city_center[1])**2); df.plot.scatter(x='DISTANCE', y='PRICE')"}
{"prompt": "Show percentage of properties with balcony by city", "response": "df['HAS_BALCONY'] = df['BALCONY_NUM']>0; pd.crosstab(df['CITY'], df['HAS_BALCONY'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without society name", "response": "df['HAS_SOCIETY'] = df['SOCIETY_NAME'].notna(); df.boxplot(column='PRICE', by='HAS_SOCIETY')"}
{"prompt": "Plot average price by day of week listed", "response": "df['DAY_OF_WEEK'] = pd.to_datetime(df['LISTING_DATE']).dt.day_name(); df.groupby('DAY_OF_WEEK')['PRICE'].mean().reindex(['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']).plot(kind='bar')"}
{"prompt": "Show distribution of property ages in luxury category 2", "response": "df[df['LUXURY_CATEGORY']==2]['AGE'].value_counts().plot(kind='bar')"}
{"prompt": "Compare area distribution between Thane and Navi Mumbai", "response": "df[df['CITY'].isin(['thane','navi mumbai'])].boxplot(column='AREA', by='CITY')"}
{"prompt": "Plot price per sqft by locality in Central Mumbai", "response": "df['PRICE_PER_SQFT'] = df['PRICE']/df['AREA']; df[df['CITY']=='central mumbai suburbs'].groupby('LOCALITY_NAME')['PRICE_PER_SQFT'].mean().sort_values(ascending=False).head(10).plot(kind='barh')"}
{"prompt": "Show correlation matrix between numerical features", "response": "sns.heatmap(df[['PRICE','AREA','BEDROOM_NUM','BALCONY_NUM','LUXURY_CATEGORY']].corr(), annot=True, cmap='coolwarm')"}
{"prompt": "Compare price distribution between properties listed on weekdays vs weekends", "response": "df['WEEKEND'] = pd.to_datetime(df['LISTING_DATE']).dt.dayofweek >= 5; df.boxplot(column='PRICE', by='WEEKEND')"}
{"prompt": "Plot average price by hour of day listed", "response": "df['HOUR'] = pd.to_datetime(df['LISTING_DATE']).dt.hour; df.groupby('HOUR')['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show top 10 localities with most 3BHK properties", "response": "df[df['BEDROOM_NUM']==3]['LOCALITY_NAME'].value_counts().head(10).plot(kind='barh')"}
{"prompt": "Compare price distribution between properties with different descriptions lengths", "response": "df['DESC_LENGTH'] = df['DESCRIPTION'].str.len(); df['DESC_GROUP'] = pd.qcut(df['DESC_LENGTH'], 3); df.boxplot(column='PRICE', by='DESC_GROUP')"}
{"prompt": "Plot number of properties by price range", "response": "pd.cut(df['PRICE'], bins=5).value_counts().sort_index().plot(kind='bar')"}
{"prompt": "Show average days on market by property type", "response": "df.groupby('PROPERTY_TYPE')['DAYS_ON_MARKET'].mean().sort_values().plot(kind='barh')"}
{"prompt": "Compare price per sqft between properties with different ages", "response": "df['PRICE_PER_SQFT'] = df['PRICE']/df['AREA']; df.boxplot(column='PRICE_PER_SQFT', by='AGE')"}
{"prompt": "Plot number of properties by balcony count and bedroom count", "response": "pd.crosstab(df['BEDROOM_NUM'], df['BALCONY_NUM']).plot(kind='bar', stacked=True)"}
{"prompt": "Show geographical distribution of properties with swimming pool mention", "response": "px.scatter_mapbox(df[df['DESCRIPTION'].str.contains('swimming pool', case=False)], lat='LATITUDE', lon='LONGITUDE', color='PRICE', mapbox_style='carto-positron')"}
{"prompt": "Compare price distribution between properties with gym and without gym mention", "response": "df['HAS_GYM'] = df['DESCRIPTION'].str.contains('gym', case=False); df.boxplot(column='PRICE', by='HAS_GYM')"}
{"prompt": "Plot average price by season listed (assuming date)", "response": "df['MONTH'] = pd.to_datetime(df['LISTING_DATE']).dt.month; df['SEASON'] = df['MONTH'].apply(lambda x: 'Winter' if x in [12,1,2] else ('Summer' if x in [3,4,5] else ('Monsoon' if x in [6,7,8,9] else 'Autumn'))); df.groupby('SEASON')['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'view' in description", "response": "df[df['DESCRIPTION'].str.contains('view', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare area distribution between luxury categories", "response": "df.boxplot(column='AREA', by='LUXURY_CATEGORY')"}
{"prompt": "Plot number of properties by facing direction and furnish type", "response": "pd.crosstab(df['FACING'], df['FURNISH']).plot(kind='bar', stacked=True)"}
{"prompt": "Show average price for properties mentioning 'park' in description", "response": "df[df['DESCRIPTION'].str.contains('park', case=False)]['PRICE'].mean()"}
{"prompt": "Compare price distribution between properties with and without 'modern' in description", "response": "df['MODERN'] = df['DESCRIPTION'].str.contains('modern', case=False); df.boxplot(column='PRICE', by='MODERN')"}
{"prompt": "Plot price per sqft by number of bedrooms and furnish type", "response": "df['PRICE_PER_SQFT'] = df['PRICE']/df['AREA']; df.pivot_table(index='BEDROOM_NUM', columns='FURNISH', values='PRICE_PER_SQFT', aggfunc='mean').plot(kind='bar')"}
{"prompt": "Show top 10 societies with highest average price per sqft", "response": "df['PRICE_PER_SQFT'] = df['PRICE']/df['AREA']; df.groupby('SOCIETY_NAME')['PRICE_PER_SQFT'].mean().sort_values(ascending=False).head(10).plot(kind='barh')"}
{"prompt": "Compare price distribution between properties mentioning 'spacious' vs others", "response": "df['SPACIOUS'] = df['DESCRIPTION'].str.contains('spacious', case=False); df.boxplot(column='PRICE', by='SPACIOUS')"}
{"prompt": "Plot average days on market by city", "response": "df.groupby('CITY')['DAYS_ON_MARKET'].mean().sort_values().plot(kind='barh')"}
{"prompt": "Show percentage of properties with gym mention by luxury category", "response": "df['HAS_GYM'] = df['DESCRIPTION'].str.contains('gym', case=False); pd.crosstab(df['LUXURY_CATEGORY'], df['HAS_GYM'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with different description sentiment scores", "response": "df.boxplot(column='PRICE', by='SENTIMENT_SCORE')"}
{"prompt": "Plot number of properties by price range and city", "response": "df['PRICE_RANGE'] = pd.cut(df['PRICE'], bins=5); pd.crosstab(df['CITY'], df['PRICE_RANGE']).plot(kind='bar', stacked=True)"}
{"prompt": "Show average price for properties mentioning 'security' in description", "response": "df[df['DESCRIPTION'].str.contains('security', case=False)]['PRICE'].mean()"}
{"prompt": "Compare price per sqft between properties with different floor types", "response": "df['PRICE_PER_SQFT'] = df['PRICE']/df['AREA']; df.boxplot(column='PRICE_PER_SQFT', by='FLOOR_NUM')"}
{"prompt": "Plot average days on market by property age", "response": "df.groupby('AGE')['DAYS_ON_MARKET'].mean().plot(kind='bar')"}
{"prompt": "Show geographical distribution of properties with price below 50 lakhs", "response": "px.scatter_mapbox(df[df['PRICE']<5e6], lat='LATITUDE', lon='LONGITUDE', color='CITY', mapbox_style='carto-positron')"}
{"prompt": "Compare price distribution between properties with and without 'luxury' in description", "response": "df['LUXURY_DESC'] = df['DESCRIPTION'].str.contains('luxury', case=False); df.boxplot(column='PRICE', by='LUXURY_DESC')"}
{"prompt": "Plot average price by number of words in description", "response": "df['DESC_WORDS'] = df['DESCRIPTION'].str.split().str.len(); df['WORD_GROUP'] = pd.qcut(df['DESC_WORDS'], 4); df.groupby('WORD_GROUP')['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with swimming pool mention by luxury category", "response": "df['HAS_POOL'] = df['DESCRIPTION'].str.contains('swimming pool', case=False); pd.crosstab(df['LUXURY_CATEGORY'], df['HAS_POOL'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'renovated' in description", "response": "df['RENOVATED'] = df['DESCRIPTION'].str.contains('renovated', case=False); df.boxplot(column='PRICE', by='RENOVATED')"}
{"prompt": "Plot average price by first letter of locality name", "response": "df['LOCALITY_INITIAL'] = df['LOCALITY_NAME'].str[0]; df.groupby('LOCALITY_INITIAL')['PRICE'].mean().sort_index().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'garden' in description", "response": "df[df['DESCRIPTION'].str.contains('garden', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between furnished and unfurnished properties", "response": "df.boxplot(column='DAYS_ON_MARKET', by='FURNISH')"}
{"prompt": "Plot average price by length of property name", "response": "df['NAME_LENGTH'] = df['PROP_NAME'].str.len(); df['NAME_GROUP'] = pd.qcut(df['NAME_LENGTH'], 4); df.groupby('NAME_GROUP')['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'new' in description by city", "response": "df['NEW_DESC'] = df['DESCRIPTION'].str.contains('new', case=False); pd.crosstab(df['CITY'], df['NEW_DESC'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with short vs long descriptions", "response": "df['DESC_LENGTH'] = df['DESCRIPTION'].str.len(); df['SHORT_DESC'] = df['DESC_LENGTH'] < df['DESC_LENGTH'].median(); df.boxplot(column='PRICE', by='SHORT_DESC')"}
{"prompt": "Plot average price by number of amenities mentioned", "response": "df['AMENITIES_COUNT'] = df['DESCRIPTION'].str.count('amenities|facilities|features'); df.groupby('AMENITIES_COUNT')['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'corner' in description", "response": "df[df['DESCRIPTION'].str.contains('corner', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare price per sqft between properties with different balcony counts", "response": "df['PRICE_PER_SQFT'] = df['PRICE']/df['AREA']; df.boxplot(column='PRICE_PER_SQFT', by='BALCONY_NUM')"}
{"prompt": "Plot average days on market by facing direction", "response": "df.groupby('FACING')['DAYS_ON_MARKET'].mean().sort_values().plot(kind='barh')"}
{"prompt": "Show geographical distribution of properties mentioning 'sea view'", "response": "px.scatter_mapbox(df[df['DESCRIPTION'].str.contains('sea view', case=False)], lat='LATITUDE', lon='LONGITUDE', color='PRICE', mapbox_style='carto-positron')"}
{"prompt": "Compare price distribution between properties with and without 'investment' in description", "response": "df['INVESTMENT'] = df['DESCRIPTION'].str.contains('investment', case=False); df.boxplot(column='PRICE', by='INVESTMENT')"}
{"prompt": "Plot average price by number of adjectives in description", "response": "df['ADJECTIVES'] = df['DESCRIPTION'].str.count('beautiful|spacious|luxury|modern'); df.groupby('ADJECTIVES')['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'ready to move' in description by city", "response": "df['READY_TO_MOVE'] = df['DESCRIPTION'].str.contains('ready to move', case=False); pd.crosstab(df['CITY'], df['READY_TO_MOVE'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'duplex' in description", "response": "df['DUPLEX'] = df['DESCRIPTION'].str.contains('duplex', case=False); df.boxplot(column='PRICE', by='DUPLEX')"}
{"prompt": "Plot average price by number of sentences in description", "response": "df['SENTENCES'] = df['DESCRIPTION'].str.count('[.!?]'); df.groupby('SENTENCES')['PRICE'].mean().plot(kind='line')"}
{"prompt": "Show price distribution for properties mentioning 'penthouse'", "response": "df[df['DESCRIPTION'].str.contains('penthouse', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different luxury categories", "response": "df.boxplot(column='DAYS_ON_MARKET', by='LUXURY_CATEGORY')"}
{"prompt": "Plot average price by presence of contact number in description", "response": "df['HAS_PHONE'] = df['DESCRIPTION'].str.contains(r'\\d{10}', regex=True); df.groupby('HAS_PHONE')['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'corner' mention by locality", "response": "df['CORNER'] = df['DESCRIPTION'].str.contains('corner', case=False); pd.crosstab(df['LOCALITY_NAME'], df['CORNER'], normalize='index').iloc[:10].plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'vaastu' in description", "response": "df['VAASTU'] = df['DESCRIPTION'].str.contains('vaastu|vastu', case=False); df.boxplot(column='PRICE', by='VAASTU')"}
{"prompt": "Plot average price by number of unique words in description", "response": "df['UNIQUE_WORDS'] = df['DESCRIPTION'].apply(lambda x: len(set(str(x).split()))); df.groupby(pd.qcut(df['UNIQUE_WORDS'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'heritage'", "response": "df[df['DESCRIPTION'].str.contains('heritage', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different facing directions", "response": "df.boxplot(column='DAYS_ON_MARKET', by='FACING')"}
{"prompt": "Plot average price by presence of emoji in description", "response": "df['HAS_EMOJI'] = df['DESCRIPTION'].str.contains('[\\U0001F600-\\U0001F64F]', regex=True); df.groupby('HAS_EMOJI')['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'discount' mention by month", "response": "df['DISCOUNT'] = df['DESCRIPTION'].str.contains('discount', case=False); df['MONTH'] = pd.to_datetime(df['LISTING_DATE']).dt.month; pd.crosstab(df['MONTH'], df['DISCOUNT'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'builder floor' in description", "response": "df['BUILDER_FLOOR'] = df['DESCRIPTION'].str.contains('builder floor', case=False); df.boxplot(column='PRICE', by='BUILDER_FLOOR')"}
{"prompt": "Plot average price by number of paragraphs in description", "response": "df['PARAGRAPHS'] = df['DESCRIPTION'].str.count('\\n\\n'); df.groupby('PARAGRAPHS')['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'studio'", "response": "df[df['DESCRIPTION'].str.contains('studio', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different property types", "response": "df.boxplot(column='DAYS_ON_MARKET', by='PROPERTY_TYPE')"}
{"prompt": "Plot average price by presence of URL in description", "response": "df['HAS_URL'] = df['DESCRIPTION'].str.contains('http[s]?://', regex=True); df.groupby('HAS_URL')['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'negotiable' mention by price range", "response": "df['NEGOTIABLE'] = df['DESCRIPTION'].str.contains('negotiable', case=False); df['PRICE_RANGE'] = pd.cut(df['PRICE'], bins=5); pd.crosstab(df['PRICE_RANGE'], df['NEGOTIABLE'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'premium' in description", "response": "df['PREMIUM'] = df['DESCRIPTION'].str.contains('premium', case=False); df.boxplot(column='PRICE', by='PREMIUM')"}
{"prompt": "Plot average price by number of proper nouns in description", "response": "df['PROPER_NOUNS'] = df['DESCRIPTION'].str.count('[A-Z][a-z]+'); df.groupby(pd.qcut(df['PROPER_NOUNS'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'resale'", "response": "df[df['DESCRIPTION'].str.contains('resale', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different balcony counts", "response": "df.boxplot(column='DAYS_ON_MARKET', by='BALCONY_NUM')"}
{"prompt": "Plot average price by presence of price mention in description", "response": "df['PRICE_IN_DESC'] = df['DESCRIPTION'].str.contains('\u20b9|rs\\.?|rupees', case=False); df.groupby('PRICE_IN_DESC')['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'immediate possession' by city", "response": "df['IMMEDIATE'] = df['DESCRIPTION'].str.contains('immediate possession', case=False); pd.crosstab(df['CITY'], df['IMMEDIATE'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'corporate booking' in description", "response": "df['CORPORATE'] = df['DESCRIPTION'].str.contains('corporate booking', case=False); df.boxplot(column='PRICE', by='CORPORATE')"}
{"prompt": "Plot average price by number of verbs in description", "response": "df['VERBS'] = df['DESCRIPTION'].str.count('\\b(is|are|was|were|have|has|had)\\b', flags=re.I); df.groupby(pd.qcut(df['VERBS'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'servant room'", "response": "df[df['DESCRIPTION'].str.contains('servant room', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different floor types", "response": "df.boxplot(column='DAYS_ON_MARKET', by='FLOOR_NUM')"}
{"prompt": "Plot average price by presence of special characters in description", "response": "df['SPECIAL_CHARS'] = df['DESCRIPTION'].str.count('[!@#$%^&*()]'); df.groupby(pd.qcut(df['SPECIAL_CHARS'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'no broker' mention by locality", "response": "df['NO_BROKER'] = df['DESCRIPTION'].str.contains('no broker', case=False); pd.crosstab(df['LOCALITY_NAME'], df['NO_BROKER'], normalize='index').iloc[:10].plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'gated community' in description", "response": "df['GATED'] = df['DESCRIPTION'].str.contains('gated community', case=False); df.boxplot(column='PRICE', by='GATED')"}
{"prompt": "Plot average price by reading level of description", "response": "df['READING_LEVEL'] = df['DESCRIPTION'].apply(textstat.flesch_reading_ease); df.groupby(pd.qcut(df['READING_LEVEL'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'corner plot'", "response": "df[df['DESCRIPTION'].str.contains('corner plot', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different ages", "response": "df.boxplot(column='DAYS_ON_MARKET', by='AGE')"}
{"prompt": "Plot average price by presence of bullet points in description", "response": "df['BULLETS'] = df['DESCRIPTION'].str.count('\u2022|\\* |- '); df.groupby(pd.qcut(df['BULLETS'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'landmark' mention by city", "response": "df['LANDMARK'] = df['DESCRIPTION'].str.contains('landmark', case=False); pd.crosstab(df['CITY'], df['LANDMARK'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'corner' in title", "response": "df['CORNER_TITLE'] = df['PROP_HEADING'].str.contains('corner', case=False); df.boxplot(column='PRICE', by='CORNER_TITLE')"}
{"prompt": "Plot average price by number of questions in description", "response": "df['QUESTIONS'] = df['DESCRIPTION'].str.count('\\?'); df.groupby(pd.qcut(df['QUESTIONS'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'marble flooring'", "response": "df[df['DESCRIPTION'].str.contains('marble flooring', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different luxury categories", "response": "df.boxplot(column='DAYS_ON_MARKET', by='LUXURY_CATEGORY')"}
{"prompt": "Plot average price by presence of exclamation marks in description", "response": "df['EXCLAMATIONS'] = df['DESCRIPTION'].str.count('!'); df.groupby(pd.qcut(df['EXCLAMATIONS'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'posh' mention by locality", "response": "df['POSH'] = df['DESCRIPTION'].str.contains('posh', case=False); pd.crosstab(df['LOCALITY_NAME'], df['POSH'], normalize='index').iloc[:10].plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'prime location' in description", "response": "df['PRIME'] = df['DESCRIPTION'].str.contains('prime location', case=False); df.boxplot(column='PRICE', by='PRIME')"}
{"prompt": "Plot average price by number of commas in description", "response": "df['COMMAS'] = df['DESCRIPTION'].str.count(','); df.groupby(pd.qcut(df['COMMAS'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'wooden flooring'", "response": "df[df['DESCRIPTION'].str.contains('wooden flooring', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different furnish types", "response": "df.boxplot(column='DAYS_ON_MARKET', by='FURNISH')"}
{"prompt": "Plot average price by presence of all caps words in description", "response": "df['ALLCAPS'] = df['DESCRIPTION'].str.count('\\b[A-Z]{3,}\\b'); df.groupby(pd.qcut(df['ALLCAPS'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'exclusive' mention by price range", "response": "df['EXCLUSIVE'] = df['DESCRIPTION'].str.contains('exclusive', case=False); df['PRICE_RANGE'] = pd.cut(df['PRICE'], bins=5); pd.crosstab(df['PRICE_RANGE'], df['EXCLUSIVE'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'rare' in description", "response": "df['RARE'] = df['DESCRIPTION'].str.contains('rare', case=False); df.boxplot(column='PRICE', by='RARE')"}
{"prompt": "Plot average price by number of digits in description", "response": "df['DIGITS'] = df['DESCRIPTION'].str.count('\\d'); df.groupby(pd.qcut(df['DIGITS'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'vitrified flooring'", "response": "df[df['DESCRIPTION'].str.contains('vitrified flooring', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different facing directions", "response": "df.boxplot(column='DAYS_ON_MARKET', by='FACING')"}
{"prompt": "Plot average price by presence of foreign words in description", "response": "df['FOREIGN'] = df['DESCRIPTION'].str.count('\\b(ac|de|en|et|la|le|il|lo|el|un|una|uno)\\b', flags=re.I); df.groupby(pd.qcut(df['FOREIGN'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'limited period offer' by month", "response": "df['OFFER'] = df['DESCRIPTION'].str.contains('limited period offer', case=False); df['MONTH'] = pd.to_datetime(df['LISTING_DATE']).dt.month; pd.crosstab(df['MONTH'], df['OFFER'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'hurry' in description", "response": "df['HURRY'] = df['DESCRIPTION'].str.contains('hurry', case=False); df.boxplot(column='PRICE', by='HURRY')"}
{"prompt": "Plot average price by number of proper nouns per sentence", "response": "df['PROPER_PER_SENT'] = df['PROPER_NOUNS']/(df['SENTENCES']+1); df.groupby(pd.qcut(df['PROPER_PER_SENT'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'modular kitchen'", "response": "df[df['DESCRIPTION'].str.contains('modular kitchen', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different property ages", "response": "df.boxplot(column='DAYS_ON_MARKET', by='AGE')"}
{"prompt": "Plot average price by presence of positive sentiment words", "response": "df['POSITIVE'] = df['DESCRIPTION'].str.count('\\b(good|great|excellent|wonderful|amazing|perfect)\\b', flags=re.I); df.groupby(pd.qcut(df['POSITIVE'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'last unit' mention by luxury category", "response": "df['LAST_UNIT'] = df['DESCRIPTION'].str.contains('last unit', case=False); pd.crosstab(df['LUXURY_CATEGORY'], df['LAST_UNIT'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'bestseller' in description", "response": "df['BESTSELLER'] = df['DESCRIPTION'].str.contains('bestseller', case=False); df.boxplot(column='PRICE', by='BESTSELLER')"}
{"prompt": "Plot average price by number of superlatives in description", "response": "df['SUPERLATIVES'] = df['DESCRIPTION'].str.count('\\b(best|finest|top|greatest|highest|most)\\b', flags=re.I); df.groupby(pd.qcut(df['SUPERLATIVES'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'walk-in closet'", "response": "df[df['DESCRIPTION'].str.contains('walk-in closet', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different floor numbers", "response": "df.boxplot(column='DAYS_ON_MARKET', by='FLOOR_NUM')"}
{"prompt": "Plot average price by presence of negative sentiment words", "response": "df['NEGATIVE'] = df['DESCRIPTION'].str.count('\\b(bad|poor|worst|ugly|terrible|horrible)\\b', flags=re.I); df.groupby(pd.qcut(df['NEGATIVE'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'festival offer' by month", "response": "df['FESTIVAL'] = df['DESCRIPTION'].str.contains('festival offer', case=False); df['MONTH'] = pd.to_datetime(df['LISTING_DATE']).dt.month; pd.crosstab(df['MONTH'], df['FESTIVAL'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'sold out' in description", "response": "df['SOLD_OUT'] = df['DESCRIPTION'].str.contains('sold out', case=False); df.boxplot(column='PRICE', by='SOLD_OUT')"}
{"prompt": "Plot average price by number of comparative adjectives in description", "response": "df['COMPARATIVES'] = df['DESCRIPTION'].str.count('\\b(better|bigger|larger|nicer|higher|more)\\b', flags=re.I); df.groupby(pd.qcut(df['COMPARATIVES'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'jacuzzi'", "response": "df[df['DESCRIPTION'].str.contains('jacuzzi', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different balcony counts", "response": "df.boxplot(column='DAYS_ON_MARKET', by='BALCONY_NUM')"}
{"prompt": "Plot average price by presence of time-sensitive words", "response": "df['TIME_SENSITIVE'] = df['DESCRIPTION'].str.count('\\b(now|today|soon|quick|fast|immediate)\\b', flags=re.I); df.groupby(pd.qcut(df['TIME_SENSITIVE'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'launch offer' by month", "response": "df['LAUNCH'] = df['DESCRIPTION'].str.contains('launch offer', case=False); df['MONTH'] = pd.to_datetime(df['LISTING_DATE']).dt.month; pd.crosstab(df['MONTH'], df['LAUNCH'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'almost sold out' in description", "response": "df['ALMOST_SOLD'] = df['DESCRIPTION'].str.contains('almost sold out', case=False); df.boxplot(column='PRICE', by='ALMOST_SOLD')"}
{"prompt": "Plot average price by number of power words in description", "response": "df['POWER_WORDS'] = df['DESCRIPTION'].str.count('\\b(exclusive|luxury|premium|elite|rare|unique)\\b', flags=re.I); df.groupby(pd.qcut(df['POWER_WORDS'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'home theater'", "response": "df[df['DESCRIPTION'].str.contains('home theater', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different luxury categories", "response": "df.boxplot(column='DAYS_ON_MARKET', by='LUXURY_CATEGORY')"}
{"prompt": "Plot average price by presence of urgency indicators in description", "response": "df['URGENCY'] = df['DESCRIPTION'].str.count('\\b(hurry|limited|offer|last|few|left)\\b', flags=re.I); df.groupby(pd.qcut(df['URGENCY'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'diwali offer' by month", "response": "df['DIWALI'] = df['DESCRIPTION'].str.contains('diwali offer', case=False); df['MONTH'] = pd.to_datetime(df['LISTING_DATE']).dt.month; pd.crosstab(df['MONTH'], df['DIWALI'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'price reduced' in description", "response": "df['PRICE_REDUCED'] = df['DESCRIPTION'].str.contains('price reduced', case=False); df.boxplot(column='PRICE', by='PRICE_REDUCED')"}
{"prompt": "Plot average price by number of emotional words in description", "response": "df['EMOTIONAL'] = df['DESCRIPTION'].str.count('\\b(love|happy|joy|peace|comfort|dream)\\b', flags=re.I); df.groupby(pd.qcut(df['EMOTIONAL'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'smart home'", "response": "df[df['DESCRIPTION'].str.contains('smart home', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different property types", "response": "df.boxplot(column='DAYS_ON_MARKET', by='PROPERTY_TYPE')"}
{"prompt": "Plot average price by presence of social proof in description", "response": "df['SOCIAL_PROOF'] = df['DESCRIPTION'].str.count('\\b(popular|sold|booked|demand|choice|preferred)\\b', flags=re.I); df.groupby(pd.qcut(df['SOCIAL_PROOF'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'new year offer' by month", "response": "df['NEW_YEAR'] = df['DESCRIPTION'].str.contains('new year offer', case=False); df['MONTH'] = pd.to_datetime(df['LISTING_DATE']).dt.month; pd.crosstab(df['MONTH'], df['NEW_YEAR'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'owner selling' in description", "response": "df['OWNER'] = df['DESCRIPTION'].str.contains('owner selling', case=False); df.boxplot(column='PRICE', by='OWNER')"}
{"prompt": "Plot average price by number of sensory words in description", "response": "df['SENSORY'] = df['DESCRIPTION'].str.count('\\b(bright|spacious|airy|sunny|quiet|green)\\b', flags=re.I); df.groupby(pd.qcut(df['SENSORY'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'concierge'", "response": "df[df['DESCRIPTION'].str.contains('concierge', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different furnish types", "response": "df.boxplot(column='DAYS_ON_MARKET', by='FURNISH')"}
{"prompt": "Plot average price by presence of scarcity indicators in description", "response": "df['SCARCITY'] = df['DESCRIPTION'].str.count('\\b(only|unique|exclusive|rare|last|limited)\\b', flags=re.I); df.groupby(pd.qcut(df['SCARCITY'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show percentage of properties with 'christmas offer' by month", "response": "df['CHRISTMAS'] = df['DESCRIPTION'].str.contains('christmas offer', case=False); df['MONTH'] = pd.to_datetime(df['LISTING_DATE']).dt.month; pd.crosstab(df['MONTH'], df['CHRISTMAS'], normalize='index').plot(kind='bar', stacked=True)"}
{"prompt": "Compare price distribution between properties with and without 'direct owner' in description", "response": "df['DIRECT_OWNER'] = df['DESCRIPTION'].str.contains('direct owner', case=False); df.boxplot(column='PRICE', by='DIRECT_OWNER')"}
{"prompt": "Plot average price by number of benefit-focused words in description", "response": "df['BENEFITS'] = df['DESCRIPTION'].str.count('\\b(profit|return|growth|income|yield|value)\\b', flags=re.I); df.groupby(pd.qcut(df['BENEFITS'], 4))['PRICE'].mean().plot(kind='bar')"}
{"prompt": "Show price distribution for properties mentioning 'panic room'", "response": "df[df['DESCRIPTION'].str.contains('panic room', case=False)]['PRICE'].plot(kind='hist')"}
{"prompt": "Compare days on market between properties with different ages", "response": "df.boxplot(column='DAYS_ON_MARKET', by='AGE')"}